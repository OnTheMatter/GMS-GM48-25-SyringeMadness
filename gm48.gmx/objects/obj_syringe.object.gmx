<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_syringe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = noone;
target = noone;
dir = random(360);
spd = 0.5;
spd_increase = 0.1;
max_spd = 5;
r_speed = 8;

AIMLESSLY_WANDER = 0;
FLOATING_BY_PLAYER = 1;
ATTACKING = 2;
ATTACHING_TO_PLAYER = 3;
PLAYER_GUN = 4;

state = AIMLESSLY_WANDER;

contents = NOTHING;
amount_of_contents = 0;
attack_type = NOT_ATTACKING;
shoot = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(state)
{
    case AIMLESSLY_WANDER:
        var x1 = x + clamp(lengthdir_x(32,image_angle + random_range(-32,32)),0,room_width);
        var y1 = y + clamp(lengthdir_y(32,image_angle + random_range(-32,32)),0,room_height);
        dir = point_direction(x,y,x1,y1);
        spd = clamp(spd + choose(1,-1) * spd_increase,spd_increase,max_spd);
        x += lengthdir_x(spd,image_angle);
        y += lengthdir_y(spd,image_angle);
        if (instance_exists(owner))
        {
            state = FLOATING_BY_PLAYER;
        }
    break;
    
    
    case FLOATING_BY_PLAYER:
    if (instance_exists(owner))
    {
        if (distance_to_object(owner) &gt; 96)
        {
            spd = min(spd + spd_increase,max_spd);
            var x1 = owner.x + lengthdir_x(random(96),random(360));
            var y1 = owner.y + lengthdir_y(random(96),random(360));
            dir = point_direction(x,y,x1,y1);
        }   
        else
        {
            dir += irandom_range(-1,1)
            if (spd &gt;= max_spd/2)
            {
                spd = max(spd - spd_increase,0);
            }
            else
            {
                spd = clamp(spd + choose(1,-1) * spd_increase,spd_increase,max_spd);
            }
        }
        
        x += lengthdir_x(spd,image_angle);
        y += lengthdir_y(spd,image_angle);
    }
    else
    {
        state = AIMLESSLY_WANDER;
    }
    break;
    
    case ATTACKING:
        if (instance_exists(owner))
        {
            if (owner.syringe_attack)
            {
                if (instance_exists(target))
                {
                    dir = point_direction(x,y,target.x,target.y);
                    spd = min(spd + spd_increase,max_spd);
                    
                    x += lengthdir_x(spd,image_angle);
                    y += lengthdir_y(spd,image_angle);
                }
                else
                {
                    state = FLOATING_BY_PLAYER;
                }
            }
            else
            {   
                state = FLOATING_BY_PLAYER;
            }
        }
    break;
    
    case ATTACHING_TO_PLAYER:
        if (instance_exists(owner))
        {
            dir = point_direction(x,y,owner.x,owner.y);
            x += lengthdir_x(spd,dir);
            y += lengthdir_y(spd,dir);
        }
        else
        {
            state = AIMLESSLY_WANDER;
        }   
    break;
    
    case PLAYER_GUN:
        if (instance_exists(owner))
        {
            if (shoot)
            {
                switch(contents)
                {
                    case ACID:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_acid_glob))
                        {
                            dir = other.image_angle;
                        }
                        amount_of_contents--;
                    break;
                    
                    case FIRE:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_flame_glob))
                        {
                            dir = other.image_angle + random_range(-8,8);
                        }
                        amount_of_contents--;
                    break;
                    
                    case NITRO:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_nitro_glob))
                        {
                            dir = other.image_angle;
                        }
                        owner.x_speed += lengthdir_x(0.25,image_angle + 180);
                        owner.y_speed += lengthdir_y(0.25,image_angle + 180);
                        amount_of_contents--;
                    break;
                    
                    case VOID:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_void_glob))
                        {
                            dir = other.image_angle;
                        }
                        amount_of_contents = 0;
                    break;
                    
                    case PLASMA:
                        repeat(irandom(16))
                        {
                            with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_plasma_glob))
                            {
                                dir = other.image_angle + random_range(-8,8);
                            }
                        }
                        amount_of_contents--;
                    break;
                    
                    case PLATINUM:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_platinum_glob))
                        {
                            dir = other.image_angle;
                        }
                        amount_of_contents--;
                    break;
                    
                    case BACTERIA:
                        with (instance_create(x + lengthdir_x(sprite_width/2,image_angle),y + lengthdir_y(sprite_height/2,image_angle),obj_bacteria_glob))
                        {
                            dir = other.image_angle;
                        }
                        amount_of_contents--;
                    break;                    
                    
                    case NOTHING:
                        state = FLOATING_BY_PLAYER;
                    break;
                }
                shoot = false;
            }
            x = owner.x + lengthdir_x(owner.radius,owner.syringe_gun_dir);
            y = owner.y + lengthdir_y(owner.radius,owner.syringe_gun_dir);
            image_angle = owner.syringe_gun_dir;
        }
        else
        {
            state = AIMLESSLY_WANDER;
        }
    break;
}

image_angle += dsin(dir - image_angle) * r_speed;

if (amount_of_contents &lt;= 0)
{
    contents = NOTHING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == ATTACKING)
{
    if (other.id == target)
    {
        target = noone;
        if (attack_type == DRAW_MATERIALS)
        {
            contents = other.contents;
            other.contents = NOTHING;
            var amc = amount_of_contents;
            amount_of_contents += other.amount_of_contents;
            other.amount_of_contents = 0;
            owner.syringe_attack = false;
        }
        else if (attack_type == INJECT_MATERIALS)
        {
            other.contents = contents;
            contents = NOTHING;
            var oamc = amount_of_contents;
            other.amount_of_contents += amount_of_contents;
            amount_of_contents = 0;
            owner.syringe_attack = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == ATTACHING_TO_PLAYER)
{
    state = PLAYER_GUN;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
