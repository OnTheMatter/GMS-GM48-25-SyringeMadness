<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current_x = 0;
current_y = 0;
pause_surf = surface_create(view_wview,view_hview);

pause[0,0] = "Continue";
pause[0,1] = "Return to Menu";

paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != rm_menu)
{
    if (keyboard_check_pressed(vk_escape))
    {
        if (paused)
        {
            paused = false
            instance_activate_all();
            surface_free(pause_surf);
        }
        else
        {
            paused = true;
            pause_surf = surface_create(view_wview,view_hview);
            surface_copy(pause_surf,0,0,application_surface);
            instance_deactivate_all(true);
        }
    }
    
    
    
    if (paused)
    {
    
        var up = keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W"));
        var down = keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord("S"));
        var left = keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A"));
        var right = keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D"));
        var enter = keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space);
        
        
        if (up)
        {
            if (current_y == 0)
            {
                current_y = array_length_2d(pause,current_x) - 1;
            }
            else
            {
                current_y--;
            }
        }
        
        if (down)
        {
            if (current_y == array_length_2d(pause,current_x) - 1)
            {
                current_y = 0;
            }
            else
            {
                current_y++;
            }
        }
        
        if (enter)
        {
            switch(pause[current_x,current_y])
            {
                case "Continue":
                    paused = false;
                    surface_free(pause_surf);
                    instance_activate_all();
                break;
                
                case "Return to Menu":
                    paused = false;
                    instance_activate_all();
                    room_goto(rm_menu);
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (paused)
{
    draw_set_color(c_black);
    if (surface_exists(pause_surf))
    {
        draw_surface(pause_surf,0,0);
    }
    draw_set_alpha(0.5);
    draw_rectangle(0,0,view_wview,view_hview,0);
    draw_set_alpha(1);
    draw_set_font(fnt_normal);
    for (var i = 0; i &lt; array_length_2d(pause,current_x); i++)
    {
        if (i == current_y) draw_set_color(c_red) else draw_set_color(c_white);
        draw_text(view_wview/2,(view_hview/4) + 15 * i,pause[current_x,i]);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
