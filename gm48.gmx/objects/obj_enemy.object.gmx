<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vial</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contents = choose(ACID,FIRE);
if (irandom(10) == 1) contents = NITRO;
if (irandom(100) == 1) contents = VOID;
if (irandom(50) == 1) contents = PLASMA;
if (instance_exists(obj_enemy_spawner))
{
    if (obj_enemy_spawner.kills &gt; 50)
    {
        if (irandom(50) == 1) contents = PLATINUM;
    }
    
    if (obj_enemy_spawner.kills &gt; 100)
    {
        if (irandom(200) == 1) contents = BACTERIA;
    }
}
amount_of_contents = 1;
max_amount_of_contents = 2;
radius = sprite_width/2;
r_dir = 0;
r_speed = 4;
shooting_angle = 32;
target_x = random(room_width);
target_y = random(room_height);
target_timer = 0;
target_time = irandom_range(3,6) * room_speed;

shoot_timer = 0;
shoot_time = irandom_range(60,120);
shoot_range = 320;
bullet_speed = irandom_range(1,2);
bullet_randomness = 32;
spd = random_range(0.1,0.5);

hp = 1;
max_hp = hp;

if (irandom(60) == 1)
{
    var type = irandom_range(1,4);
    if (type == 1)
    {
        bullet_speed = irandom_range(1,1.5);
        bullet_randomness = 360;
        shoot_range = 640;
        shoot_timer = 60;
        shoot_time = 1;
        max_amount_of_contents = 10;
        shooting_angle = 360;
        spd = 0;
    }
    else if (type == 2)
    {
        bullet_speed = irandom_range(4,5);
        bullet_randomness = 0;
        shoot_range = 720;
        shoot_timer = 60;
        shoot_time = 1 * room_speed;
        max_amount_of_contents = 5;
        shooting_angle = 5;
    }
    else if (type == 3)
    {
        bullet_speed = irandom_range(1,2);
        bullet_randomness = 64;
        shoot_range = 240;
        shoot_timer = 15;
        shoot_time = 15;
        max_amount_of_contents = 20;
        shooting_angle = 64;
    }
    else if (type == 4)
    {
        bullet_speed = irandom_range(1,12);
        bullet_randomness = 0;
        shoot_range = 60;
        shoot_timer = 15;
        shoot_time = 10;
        max_amount_of_contents = 5;
        shooting_angle = 8;
        r_speed = 16;
        spd = 0.1;
        contents = PLATINUM;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_enemy_spawner))
{
    obj_enemy_spawner.kills++;
}

switch(contents)
{
    case NOTHING:
    
    break;
    
    case ACID:
        repeat(2 * amount_of_contents)
        {
            instance_create(x,y,obj_acid_glob);
        }
    break;
    
    case FIRE:
        repeat(3 * amount_of_contents)
        {
            instance_create(x,y,obj_flame_glob);
        }   
    break;
    
    case NITRO:
        repeat(5 * amount_of_contents) instance_create(x,y,obj_nitro_glob);
    break;
    
    case VOID:
        repeat(1) instance_create(x,y,obj_void_glob);
    break
    
    case PLASMA:
        repeat(amount_of_contents * 10) instance_create(x,y,obj_plasma_glob);
    break;
    
    case PLATINUM:
        repeat(amount_of_contents) instance_create(x,y,obj_platinum_glob);
    break;
    
    case BACTERIA:
        repeat(1) instance_create(x,y,obj_bacteria_glob);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var target = instance_nearest(x,y,obj_player);


if (amount_of_contents &gt;= max_amount_of_contents)
{
    instance_destroy();
}

shoot_timer = max(shoot_timer - 1, 0);


if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_wall,0,0))
    {
        if (angle_difference(r_dir,point_direction(x,y,target.x,target.y)) &lt; shooting_angle)
        {
            if (distance_to_object(target) &lt; shoot_range)
            {
                if (shoot_timer &lt;= 0)
                {
                    shoot_timer = shoot_time;
                    var xx = x + lengthdir_x(sprite_width/2 + 16,r_dir);
                    var yy = y + lengthdir_y(sprite_width/2 + 16,r_dir);
                    with (instance_create(xx,yy,obj_bullet))
                    {
                        dir = other.r_dir + random_range(-other.bullet_randomness,other.bullet_randomness);
                        spd = other.bullet_speed;
                        image_xscale = 1;
                        image_yscale = 1;
                    }
                }
            }
        }   
    }
    r_dir += dsin(point_direction(x,y,target.x,target.y) - r_dir) * r_speed;
}
else
{
    r_dir += dsin(point_direction(x,y,target_x,target_y) - r_dir) * r_speed;
}

if (hp &lt;= 0)
{
    instance_destroy();
}

var move_amount = min(spd,distance_to_point(target_x,target_y));
if (contents == NITRO) then move_amount *= 5;
x += lengthdir_x(move_amount,point_direction(x,y,target_x,target_y));
y += lengthdir_y(move_amount,point_direction(x,y,target_x,target_y));

if (target_timer &lt;= 0)
{
    target_x = random(room_width);
    target_y = random(room_height);
    target_timer = target_time;
}
else
{
    target_timer--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (contents != NOTHING)
{
    draw_set_alpha(0.75);
    if (contents == FIRE) draw_set_color(c_red);
    if (contents == ACID) draw_set_color(c_green);
    if (contents == NITRO) draw_set_color(c_blue);
    if (contents == VOID) draw_set_color(c_black);
    if (contents == PLASMA) draw_set_color(c_purple);
    if (contents == PLATINUM) draw_set_color(c_yellow);
    if (contents == BACTERIA) draw_set_color(c_lime);
    draw_circle(floor(x),floor(y),radius,0);
     
}
draw_set_alpha(1);   
draw_sprite_ext(sprite_index,0,floor(x),floor(y),1,1,0,c_white,image_alpha);
draw_sprite_ext(spr_enemy_gun,0,x + lengthdir_x(sprite_width/2,r_dir),y + lengthdir_y(sprite_width/2,r_dir),1,1,r_dir,c_white,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
